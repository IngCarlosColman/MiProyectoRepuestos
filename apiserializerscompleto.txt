from rest_framework import serializers
from .models import Tienda, Sucursal, Categoria, Vehiculo, RepuestoGlobal, RepuestoSucursal

# Serializador para el modelo Tienda.
class TiendaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tienda
        fields = ['id', 'nombre', 'logo_url', 'email', 'telefono', 'dias_atencion', 'tiene_delivery']

# Serializador para el modelo Sucursal, que incluye la tienda a la que pertenece.
class SucursalSerializer(serializers.ModelSerializer):
    tienda = TiendaSerializer(read_only=True)

    class Meta:
        model = Sucursal
        fields = ['id', 'tienda', 'nombre', 'direccion', 'telefono', 'ubicacion']

# Serializador para el modelo Categoria.
class CategoriaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Categoria
        fields = ['id', 'nombre', 'descripcion']

# Serializador para el modelo Vehiculo.
class VehiculoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Vehiculo
        fields = ['id', 'marca', 'modelo', 'anio']

# Serializador para el modelo RepuestoGlobal, que incluye la categoría y los vehículos compatibles.
class RepuestoGlobalSerializer(serializers.ModelSerializer):
    categoria = CategoriaSerializer(read_only=True)
    compatibilidad = VehiculoSerializer(many=True, read_only=True)

    class Meta:
        model = RepuestoGlobal
        fields = ['id', 'nombre', 'descripcion', 'codigo', 'cantidad', 'imagen_url', 'categoria', 'compatibilidad']

# Serializador para el modelo RepuestoSucursal.
# Este serializador es clave para mostrar el precio y el stock de un repuesto en una sucursal específica.
class RepuestoSucursalSerializer(serializers.ModelSerializer):
    repuesto_global = RepuestoGlobalSerializer(read_only=True)
    sucursal = SucursalSerializer(read_only=True)

    class Meta:
        model = RepuestoSucursal
        fields = ['id', 'repuesto_global', 'sucursal', 'stock', 'precio']

```python
# project_name/api/views.py
# Este archivo define las "vistas" de la API que manejan las peticiones HTTP.
from rest_framework import generics
from .models import Tienda, Sucursal, Categoria, Vehiculo, RepuestoGlobal, RepuestoSucursal
from .serializers import (
    TiendaSerializer, SucursalSerializer, CategoriaSerializer,
    VehiculoSerializer, RepuestoGlobalSerializer, RepuestoSucursalSerializer
)

# Vistas para el modelo Tienda.
class TiendaList(generics.ListAPIView):
    queryset = Tienda.objects.all()
    serializer_class = TiendaSerializer

class TiendaDetail(generics.RetrieveAPIView):
    queryset = Tienda.objects.all()
    serializer_class = TiendaSerializer

# Vistas para el modelo Sucursal.
class SucursalList(generics.ListAPIView):
    queryset = Sucursal.objects.all()
    serializer_class = SucursalSerializer

class SucursalDetail(generics.RetrieveAPIView):
    queryset = Sucursal.objects.all()
    serializer_class = SucursalSerializer

# Vistas para el modelo Categoria.
class CategoriaList(generics.ListAPIView):
    queryset = Categoria.objects.all()
    serializer_class = CategoriaSerializer

class CategoriaDetail(generics.RetrieveAPIView):
    queryset = Categoria.objects.all()
    serializer_class = CategoriaSerializer

# Vistas para el modelo Vehiculo.
class VehiculoList(generics.ListAPIView):
    queryset = Vehiculo.objects.all()
    serializer_class = VehiculoSerializer

class VehiculoDetail(generics.RetrieveAPIView):
    queryset = Vehiculo.objects.all()
    serializer_class = VehiculoSerializer

# Vistas para el modelo RepuestoGlobal.
class RepuestoGlobalList(generics.ListAPIView):
    queryset = RepuestoGlobal.objects.all()
    serializer_class = RepuestoGlobalSerializer

class RepuestoGlobalDetail(generics.RetrieveAPIView):
    queryset = RepuestoGlobal.objects.all()
    serializer_class = RepuestoGlobalSerializer

# Vistas para el modelo RepuestoSucursal.
# Esta vista es útil para encontrar dónde se vende un repuesto específico.
class RepuestoSucursalList(generics.ListAPIView):
    serializer_class = RepuestoSucursalSerializer

    def get_queryset(self):
        # Permite filtrar por el ID del repuesto global
        repuesto_id = self.request.query_params.get('repuesto_id')
        if repuesto_id:
            return RepuestoSucursal.objects.filter(repuesto_global__id=repuesto_id)
        return RepuestoSucursal.objects.all()

class RepuestoSucursalDetail(generics.RetrieveAPIView):
    queryset = RepuestoSucursal.objects.all()
    serializer_class = RepuestoSucursalSerializer

```python
# project_name/api/urls.py
# Este archivo mapea las URLs de la API a las vistas correspondientes.
from django.urls import path
from .views import (
    TiendaList, TiendaDetail, SucursalList, SucursalDetail,
    CategoriaList, CategoriaDetail, VehiculoList, VehiculoDetail,
    RepuestoGlobalList, RepuestoGlobalDetail, RepuestoSucursalList,
    RepuestoSucursalDetail
)

urlpatterns = [
    # URLs para Tiendas
    path('tiendas/', TiendaList.as_view(), name='tienda-list'),
    path('tiendas/<int:pk>/', TiendaDetail.as_view(), name='tienda-detail'),

    # URLs para Sucursales
    path('sucursales/', SucursalList.as_view(), name='sucursal-list'),
    path('sucursales/<int:pk>/', SucursalDetail.as_view(), name='sucursal-detail'),

    # URLs para Categorías
    path('categorias/', CategoriaList.as_view(), name='categoria-list'),
    path('categorias/<int:pk>/', CategoriaDetail.as_view(), name='categoria-detail'),

    # URLs para Vehículos
    path('vehiculos/', VehiculoList.as_view(), name='vehiculo-list'),
    path('vehiculos/<int:pk>/', VehiculoDetail.as_view(), name='vehiculo-detail'),

    # URLs para RepuestosGlobales
    path('repuestos-globales/', RepuestoGlobalList.as_view(), name='repuesto-global-list'),
    path('repuestos-globales/<int:pk>/', RepuestoGlobalDetail.as_view(), name='repuesto-global-detail'),

    # URLs para RepuestosSucursales
    path('repuestos-sucursales/', RepuestoSucursalList.as_view(), name='repuesto-sucursal-list'),
    path('repuestos-sucursales/<int:pk>/', RepuestoSucursalDetail.as_view(), name='repuesto-sucursal-detail'),
]
